import{Vector2,Vector3}from"../Utils/vector";import{Plane}from"../Utils/plane";function testPlaneCreation(){const point=new Vector3(1,2,3),normal=new Vector3(0,1,0),plane=new Plane(point,normal);console.assert(plane.point.equals(point),"Point was not set correctly."),console.assert(plane.normal.equals(normal.normalize()),"Normal was not set correctly."),console.log("Test Plane Creation: PASSED")}function testPointProjection(){const plane=new Plane(new Vector3(0,0,0),new Vector3(0,1,0)),point=new Vector3(3,4,5),projectedPoint=plane.projectPointOntoPlane(point);console.assert(projectedPoint.equals(new Vector3(3,0,5)),"Point projection onto plane failed."),console.log("Test Point Projection: PASSED")}function testDistanceCalculation(){const plane=new Plane(new Vector3(0,0,0),new Vector3(0,1,0)),point=new Vector3(0,5,0),distance=plane.distanceToPoint(point);console.assert(5===distance,"Distance calculation is incorrect."),console.log("Test Distance Calculation: PASSED")}function testNormalRotation(){const plane=new Plane(new Vector3(0,0,0),new Vector3(0,0,1));plane.rotateNormal(new Vector3(0,1,0),90),console.assert(plane.normal.equals(new Vector3(1,0,0)),"Normal rotation failed."),console.log("Test Normal Rotation: PASSED")}function testPlaneRotationWithAnotherPlane(){const plane1=new Plane(new Vector3(0,0,0),new Vector3(0,0,1)),plane2=new Plane(new Vector3(0,0,0),new Vector3(0,1,0));plane1.rotateWithPlane(plane2),console.log("Test Plane Rotation with Another Plane: PASSED")}function testPlaneConstruction(){const point=new Vector3(1,2,3),normal=new Vector3(0,0,1),plane=new Plane(point,normal);return plane.point.equals(new Vector3(1,2,3))&&plane.normal.equals(new Vector3(0,0,1).normalize())?"Passed: Plane construction and normal vector normalization.":"Failed: Plane construction or normalization of the normal vector is incorrect."}function testSetPointAndNormal(){const plane=new Plane(new Vector3(0,0,0),new Vector3(1,0,0));return plane.setPoint(new Vector3(1,1,1)),plane.setNormal(new Vector3(0,1,0)),plane.point.equals(new Vector3(1,1,1))&&plane.normal.equals(new Vector3(0,1,0).normalize())?"Passed: Setting of point and normal vector.":"Failed: Setting of point or normal vector is incorrect."}function testIsPointOnPlane(){const plane=new Plane(new Vector3(0,0,0),new Vector3(0,0,1)),pointOnPlane=new Vector3(1,1,0),pointOffPlane=new Vector3(1,1,1);return!plane.isPointOnPlane(pointOnPlane)||plane.isPointOnPlane(pointOffPlane)?"Failed: Incorrect identification of points on or off the plane.":"Passed: Correct identification of points on and off the plane."}function testDistanceToPoint(){const plane=new Plane(new Vector3(0,0,0),new Vector3(0,0,1)),point=new Vector3(0,0,5),distance=plane.distanceToPoint(point);return 5!==distance?`Failed: Incorrect distance calculation. Expected 5, got ${distance}.`:"Passed: Correct distance calculation."}function testRotatePlaneBasedOnAnother(){const planeA=new Plane(new Vector3(0,0,0),new Vector3(0,0,1)),planeB=new Plane(new Vector3(0,0,0),new Vector3(1,0,0)),axisOfRotation=new Vector3(0,1,0),angleOfRotationRadians=Math.PI/180*90;planeA.rotateNormal(axisOfRotation,angleOfRotationRadians),planeB.rotateWithPlane(planeA);const expectedNormalB=new Vector3(0,0,1);return planeB.normal.equals(expectedNormalB)?"Passed: Plane rotation based on another plane successfully matched the expected outcome.":`Failed: Plane rotation based on another did not match expected outcome. Expected normal ${expectedNormalB.toString()}, but got ${planeB.normal.toString()}.`}function runAllTests(){console.log(testPlaneConstruction()),console.log(testSetPointAndNormal()),console.log(testIsPointOnPlane()),console.log(testDistanceToPoint()),console.log(testRotatePlaneBasedOnAnother())}testPlaneCreation(),testPointProjection(),testDistanceCalculation(),testNormalRotation(),testPlaneRotationWithAnotherPlane(),runAllTests();