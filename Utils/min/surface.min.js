import{Plane}from"./plane";import{Vector2,Vector3}from"./vector";import{Quaternion}from"./quaternion";class Shape2D{constructor(vertices,scaleX,scaleY){this.vertices=vertices,this.scaleX=scaleX,this.scaleY=scaleY}getArea(){let area=0;for(let i=0;i<this.vertices.length;i++){const v1=coords[i],v2=coords[(i+1)%coords.length];area+=v1.x*v2.y-v2.x*v1.y}return Math.abs(area)/2}getCenter(){let x=0,y=0;for(const vertex of this.vertices)x+=vertex.x,y+=vertex.y;const count=this.vertices.length;return x/=count,y/=count,new Vector2(x,y)}recenter(){const center=this.getCenter();for(const vertex of this.vertices)vertex.x-=center.x,vertex.y-=center.y;return this}normalize(){const minX=this.vertices.reduce(((min,v)=>Math.min(min,v.x)),1/0),minY=this.vertices.reduce(((min,v)=>Math.min(min,v.y)),1/0),maxX=this.vertices.reduce(((max,v)=>Math.max(max,v.x)),-1/0),maxY=this.vertices.reduce(((max,v)=>Math.max(max,v.y)),-1/0),width=maxX-minX,height=maxY-minY,centerX=(minX+maxX)/2,centerY=(minY+maxY)/2;for(const vertex of this.vertices)vertex.x=(vertex.x-centerX)/width*.5,vertex.y=(vertex.y-centerY)/height*.5;return this}static Rectangle(width,height){return new Shape2D([new Vector2(-.5,-.5),new Vector2(.5,-.5),new Vector2(.5,.5),new Vector2(-.5,.5)],width,height)}static Ellipse(width,height,rotation=0,resolution=32){const vertices=[];for(let i=0;i<resolution;i++){const angle=i/resolution*Math.PI*2+rotation,x=Math.cos(angle)*width,y=Math.sin(angle)*height;vertices.push(new Vector2(x,y))}return new Shape2D(vertices,width,height)}}class Surface2D{constructor(plane,shape,position){this.plane=plane?plane.normalize():new Plane,this.shape=shape?shape.recenter().normalize():new Shape2D,this.position=position||new Vector3}getArea(){return this.shape.getArea()}getCenter(){return this.shape.getCenter().add(this.position)}rotateByAngle(axis,angle){return this.plane.rotateByAngle(axis,angle),this}rotateByQuaternion(quaternion){return this.plane.rotateByQuaternion(quaternion),this}}export{Shape2D,Surface2D};